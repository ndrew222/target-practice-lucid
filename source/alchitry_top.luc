module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8],     // DIP switches on IO Shield
    input usb_rx,           // USB->Serial input
    output usb_tx           // USB->Serial output
) {
    
    sig rst                 // reset signal
    sig led_index
//    sig slow_clock // a wire holding current slow clock signal
    
//    const SIZE = 8 // set SIZE to any value you want
//    const SLOW_CLOCK_DEFAULT_SPEED = $is_sim() ? 8 : 28 // put 8  for sim, 28 for hardware
    led_loop led_instance (.clk(clk))

    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        .rst(rst) {
//            dff counter[SIZE]
//            dff speed_pointer[$clog2(SIZE)](#INIT(SLOW_CLOCK_DEFAULT_SPEED)) // to point (index) to certain bit of the counter dff
        }
    }
    always {      
//        counter.d = counter.q + 1 // by default: always increment by 1 
//        speed_pointer.d = speed_pointer.q // by default: leave it unchanged
        led[7:6]  = led_instance.set_idx
        io_led    = led_instance.io_led
        led[5:0]       = led_instance.led
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        io_segment = b11000000
        io_select  = h0
        usb_tx = usb_rx         // echo the serial data
    }
}